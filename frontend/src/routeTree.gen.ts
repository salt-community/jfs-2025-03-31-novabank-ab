/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TransferRouteImport } from './routes/transfer'
import { Route as TransactionsRouteImport } from './routes/transactions'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AccountsIndexRouteImport } from './routes/accounts/index'
import { Route as AdminUsersRouteImport } from './routes/admin/users'
import { Route as AdminTransactionsRouteImport } from './routes/admin/transactions'
import { Route as AdminDashboardRouteImport } from './routes/admin/dashboard'
import { Route as AdminApplicationsRouteImport } from './routes/admin/applications'
import { Route as AccountsIdRouteImport } from './routes/accounts/$id'

const TransferRoute = TransferRouteImport.update({
  id: '/transfer',
  path: '/transfer',
  getParentRoute: () => rootRouteImport,
} as any)
const TransactionsRoute = TransactionsRouteImport.update({
  id: '/transactions',
  path: '/transactions',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountsIndexRoute = AccountsIndexRouteImport.update({
  id: '/accounts/',
  path: '/accounts/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminUsersRoute = AdminUsersRouteImport.update({
  id: '/admin/users',
  path: '/admin/users',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminTransactionsRoute = AdminTransactionsRouteImport.update({
  id: '/admin/transactions',
  path: '/admin/transactions',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/admin/dashboard',
  path: '/admin/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminApplicationsRoute = AdminApplicationsRouteImport.update({
  id: '/admin/applications',
  path: '/admin/applications',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountsIdRoute = AccountsIdRouteImport.update({
  id: '/accounts/$id',
  path: '/accounts/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRoute
  '/transactions': typeof TransactionsRoute
  '/transfer': typeof TransferRoute
  '/accounts/$id': typeof AccountsIdRoute
  '/admin/applications': typeof AdminApplicationsRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/transactions': typeof AdminTransactionsRoute
  '/admin/users': typeof AdminUsersRoute
  '/accounts': typeof AccountsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRoute
  '/transactions': typeof TransactionsRoute
  '/transfer': typeof TransferRoute
  '/accounts/$id': typeof AccountsIdRoute
  '/admin/applications': typeof AdminApplicationsRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/transactions': typeof AdminTransactionsRoute
  '/admin/users': typeof AdminUsersRoute
  '/accounts': typeof AccountsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRoute
  '/transactions': typeof TransactionsRoute
  '/transfer': typeof TransferRoute
  '/accounts/$id': typeof AccountsIdRoute
  '/admin/applications': typeof AdminApplicationsRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/transactions': typeof AdminTransactionsRoute
  '/admin/users': typeof AdminUsersRoute
  '/accounts/': typeof AccountsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/register'
    | '/settings'
    | '/transactions'
    | '/transfer'
    | '/accounts/$id'
    | '/admin/applications'
    | '/admin/dashboard'
    | '/admin/transactions'
    | '/admin/users'
    | '/accounts'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/register'
    | '/settings'
    | '/transactions'
    | '/transfer'
    | '/accounts/$id'
    | '/admin/applications'
    | '/admin/dashboard'
    | '/admin/transactions'
    | '/admin/users'
    | '/accounts'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/register'
    | '/settings'
    | '/transactions'
    | '/transfer'
    | '/accounts/$id'
    | '/admin/applications'
    | '/admin/dashboard'
    | '/admin/transactions'
    | '/admin/users'
    | '/accounts/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  RegisterRoute: typeof RegisterRoute
  SettingsRoute: typeof SettingsRoute
  TransactionsRoute: typeof TransactionsRoute
  TransferRoute: typeof TransferRoute
  AccountsIdRoute: typeof AccountsIdRoute
  AdminApplicationsRoute: typeof AdminApplicationsRoute
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminTransactionsRoute: typeof AdminTransactionsRoute
  AdminUsersRoute: typeof AdminUsersRoute
  AccountsIndexRoute: typeof AccountsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/transfer': {
      id: '/transfer'
      path: '/transfer'
      fullPath: '/transfer'
      preLoaderRoute: typeof TransferRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/transactions': {
      id: '/transactions'
      path: '/transactions'
      fullPath: '/transactions'
      preLoaderRoute: typeof TransactionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/accounts/': {
      id: '/accounts/'
      path: '/accounts'
      fullPath: '/accounts'
      preLoaderRoute: typeof AccountsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/transactions': {
      id: '/admin/transactions'
      path: '/admin/transactions'
      fullPath: '/admin/transactions'
      preLoaderRoute: typeof AdminTransactionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/applications': {
      id: '/admin/applications'
      path: '/admin/applications'
      fullPath: '/admin/applications'
      preLoaderRoute: typeof AdminApplicationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/accounts/$id': {
      id: '/accounts/$id'
      path: '/accounts/$id'
      fullPath: '/accounts/$id'
      preLoaderRoute: typeof AccountsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  RegisterRoute: RegisterRoute,
  SettingsRoute: SettingsRoute,
  TransactionsRoute: TransactionsRoute,
  TransferRoute: TransferRoute,
  AccountsIdRoute: AccountsIdRoute,
  AdminApplicationsRoute: AdminApplicationsRoute,
  AdminDashboardRoute: AdminDashboardRoute,
  AdminTransactionsRoute: AdminTransactionsRoute,
  AdminUsersRoute: AdminUsersRoute,
  AccountsIndexRoute: AccountsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
