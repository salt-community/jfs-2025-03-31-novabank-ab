/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TransferImport } from './routes/transfer'
import { Route as TransactionsImport } from './routes/transactions'
import { Route as SettingsImport } from './routes/settings'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as AccountsIndexImport } from './routes/accounts/index'
import { Route as AdminUsersImport } from './routes/admin/users'
import { Route as AdminTransactionsImport } from './routes/admin/transactions'
import { Route as AdminDashboardImport } from './routes/admin/dashboard'
import { Route as AdminApplicationsImport } from './routes/admin/applications'
import { Route as AccountsIdImport } from './routes/accounts/$id'

// Create/Update Routes

const TransferRoute = TransferImport.update({
  id: '/transfer',
  path: '/transfer',
  getParentRoute: () => rootRoute,
} as any)

const TransactionsRoute = TransactionsImport.update({
  id: '/transactions',
  path: '/transactions',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AccountsIndexRoute = AccountsIndexImport.update({
  id: '/accounts/',
  path: '/accounts/',
  getParentRoute: () => rootRoute,
} as any)

const AdminUsersRoute = AdminUsersImport.update({
  id: '/admin/users',
  path: '/admin/users',
  getParentRoute: () => rootRoute,
} as any)

const AdminTransactionsRoute = AdminTransactionsImport.update({
  id: '/admin/transactions',
  path: '/admin/transactions',
  getParentRoute: () => rootRoute,
} as any)

const AdminDashboardRoute = AdminDashboardImport.update({
  id: '/admin/dashboard',
  path: '/admin/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AdminApplicationsRoute = AdminApplicationsImport.update({
  id: '/admin/applications',
  path: '/admin/applications',
  getParentRoute: () => rootRoute,
} as any)

const AccountsIdRoute = AccountsIdImport.update({
  id: '/accounts/$id',
  path: '/accounts/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/transactions': {
      id: '/transactions'
      path: '/transactions'
      fullPath: '/transactions'
      preLoaderRoute: typeof TransactionsImport
      parentRoute: typeof rootRoute
    }
    '/transfer': {
      id: '/transfer'
      path: '/transfer'
      fullPath: '/transfer'
      preLoaderRoute: typeof TransferImport
      parentRoute: typeof rootRoute
    }
    '/accounts/$id': {
      id: '/accounts/$id'
      path: '/accounts/$id'
      fullPath: '/accounts/$id'
      preLoaderRoute: typeof AccountsIdImport
      parentRoute: typeof rootRoute
    }
    '/admin/applications': {
      id: '/admin/applications'
      path: '/admin/applications'
      fullPath: '/admin/applications'
      preLoaderRoute: typeof AdminApplicationsImport
      parentRoute: typeof rootRoute
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardImport
      parentRoute: typeof rootRoute
    }
    '/admin/transactions': {
      id: '/admin/transactions'
      path: '/admin/transactions'
      fullPath: '/admin/transactions'
      preLoaderRoute: typeof AdminTransactionsImport
      parentRoute: typeof rootRoute
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersImport
      parentRoute: typeof rootRoute
    }
    '/accounts/': {
      id: '/accounts/'
      path: '/accounts'
      fullPath: '/accounts'
      preLoaderRoute: typeof AccountsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/settings': typeof SettingsRoute
  '/transactions': typeof TransactionsRoute
  '/transfer': typeof TransferRoute
  '/accounts/$id': typeof AccountsIdRoute
  '/admin/applications': typeof AdminApplicationsRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/transactions': typeof AdminTransactionsRoute
  '/admin/users': typeof AdminUsersRoute
  '/accounts': typeof AccountsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/settings': typeof SettingsRoute
  '/transactions': typeof TransactionsRoute
  '/transfer': typeof TransferRoute
  '/accounts/$id': typeof AccountsIdRoute
  '/admin/applications': typeof AdminApplicationsRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/transactions': typeof AdminTransactionsRoute
  '/admin/users': typeof AdminUsersRoute
  '/accounts': typeof AccountsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/settings': typeof SettingsRoute
  '/transactions': typeof TransactionsRoute
  '/transfer': typeof TransferRoute
  '/accounts/$id': typeof AccountsIdRoute
  '/admin/applications': typeof AdminApplicationsRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/transactions': typeof AdminTransactionsRoute
  '/admin/users': typeof AdminUsersRoute
  '/accounts/': typeof AccountsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/settings'
    | '/transactions'
    | '/transfer'
    | '/accounts/$id'
    | '/admin/applications'
    | '/admin/dashboard'
    | '/admin/transactions'
    | '/admin/users'
    | '/accounts'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/settings'
    | '/transactions'
    | '/transfer'
    | '/accounts/$id'
    | '/admin/applications'
    | '/admin/dashboard'
    | '/admin/transactions'
    | '/admin/users'
    | '/accounts'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/settings'
    | '/transactions'
    | '/transfer'
    | '/accounts/$id'
    | '/admin/applications'
    | '/admin/dashboard'
    | '/admin/transactions'
    | '/admin/users'
    | '/accounts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  SettingsRoute: typeof SettingsRoute
  TransactionsRoute: typeof TransactionsRoute
  TransferRoute: typeof TransferRoute
  AccountsIdRoute: typeof AccountsIdRoute
  AdminApplicationsRoute: typeof AdminApplicationsRoute
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminTransactionsRoute: typeof AdminTransactionsRoute
  AdminUsersRoute: typeof AdminUsersRoute
  AccountsIndexRoute: typeof AccountsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  SettingsRoute: SettingsRoute,
  TransactionsRoute: TransactionsRoute,
  TransferRoute: TransferRoute,
  AccountsIdRoute: AccountsIdRoute,
  AdminApplicationsRoute: AdminApplicationsRoute,
  AdminDashboardRoute: AdminDashboardRoute,
  AdminTransactionsRoute: AdminTransactionsRoute,
  AdminUsersRoute: AdminUsersRoute,
  AccountsIndexRoute: AccountsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/settings",
        "/transactions",
        "/transfer",
        "/accounts/$id",
        "/admin/applications",
        "/admin/dashboard",
        "/admin/transactions",
        "/admin/users",
        "/accounts/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/transactions": {
      "filePath": "transactions.tsx"
    },
    "/transfer": {
      "filePath": "transfer.tsx"
    },
    "/accounts/$id": {
      "filePath": "accounts/$id.tsx"
    },
    "/admin/applications": {
      "filePath": "admin/applications.tsx"
    },
    "/admin/dashboard": {
      "filePath": "admin/dashboard.tsx"
    },
    "/admin/transactions": {
      "filePath": "admin/transactions.tsx"
    },
    "/admin/users": {
      "filePath": "admin/users.tsx"
    },
    "/accounts/": {
      "filePath": "accounts/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
